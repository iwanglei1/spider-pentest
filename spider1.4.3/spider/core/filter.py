# date: 2020/1/09 15:20
# author: liyong
import csv
import setting
from . import const
from .utils import print_progress


class Filter(object):
    """过滤无效数据"""

    def __init__(self):
        self.rule_filtered_cnnvd = self.__load_rule_data(setting.file_rule_filtered_cnnvd, 0)
        self.rule_filter_keywords = self.__load_rule_data(setting.file_rule_filter_keywords, 0)
        self.rule_released_cve = self.__load_rule_data(setting.file_rule_released_cve, 0)
        print('------ 规则库已加载完成 ------')

    @staticmethod
    def __load_rule_data(rule_file, index):
        with open(rule_file, 'r') as csvfile:
            reader = csv.reader(csvfile)
            column = [row[index] for row in reader]
        return column

    @staticmethod
    def filter_low_level(data):
        """过滤低危漏洞"""
        left_rows = []
        filtered_rows = []
        if not data:
            return left_rows, filtered_rows
        print('* 开始过滤低危漏洞.')
        filtered_num = 0
        for index, d in enumerate(data):
            print_progress('正在过滤低危漏洞', index + 1, len(data))
            if d[const.cve_level] == 'N/A' or d[const.cve_level] == 'NULL' or d[const.cve_level] == '':
                if '低' in d[const.cnnvd_level]:
                    filtered_num += 1
                    filtered_rows.append(d)
                    continue
            else:
                if '低' in d[const.cve_level]:
                    filtered_num += 1
                    filtered_rows.append(d)
                    continue
            left_rows.append(d)
        print(f'\r* 低危漏洞过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_rows

    def filter_cnnvd_data(self, data):
        """过滤已监控的cnnvd编号"""
        left_rows = []
        filtered_num = 0
        if not data:
            return left_rows, filtered_num
        print('* 开始过滤已监控过的CNNVD编号.')
        for index, d in enumerate(data):
            print_progress('正在过滤CNNVD编号', index + 1, len(data))
            if d[const.cnnvd_id] not in self.rule_filtered_cnnvd:
                left_rows.append(d)
            else:
                filtered_num += 1
        print(f'\r* CNNVD编号过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_num

    def filter_released_cve(self, data):
        """过滤已发布的cve编号"""
        left_rows = []
        filtered_num = 0
        if not data:
            return left_rows, filtered_num
        print('* 开始过滤已发布过的CVE编号.')
        for index, d in enumerate(data):
            print_progress('正在过滤CVE编号', index + 1, len(data))
            if not self.filter_cve_id(d[const.cve_id]):
                left_rows.append(d)
            else:
                filtered_num += 1
        print(f'\r* CVE编号过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_num

    def filter_cve_id(self, cveid):
        """判断cveid是否在已发布的CVE编号中"""
        return cveid in self.rule_released_cve

    @staticmethod
    def filter_input_cve(data, input_rows):
        """过滤非输入的cve编号"""
        left_rows = []
        filtered_num = 0
        if not data:
            return left_rows, filtered_num
        print('* 开始过滤未输入的CVE编号.')
        for index, d in enumerate(data):
            print_progress('正在过滤CVE编号', index + 1, len(data))
            if d[const.cve_id] in input_rows:
                left_rows.append(d)
            else:
                filtered_num += 1
        print(f'\r* CVE编号过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_num

    def filter_keyword_data(self, data):
        """过滤关键词"""
        left_rows = []
        filtered_rows = []
        if not data:
            return left_rows, filtered_rows
        print('* 开始过滤可筛掉的漏洞关键词.')
        filtered_num = 0
        for index, d in enumerate(data):
            print_progress('正在过滤漏洞关键词', index + 1, len(data))
            filtered_flag = False   # 标识该漏洞是否包括可过滤关键词 True-包括，False-不包括
            for key in self.rule_filter_keywords:
                if key in d[const.cnnvd_name]:      # 判断可过滤词组是否包含在漏洞名称中
                    filtered_flag = True
                    break
            # if not filtered_flag:
            #     cnnvd_name = d[const.cnnvd_name].split(' ')     # 空格将漏洞名称分割开
            #     for name in cnnvd_name:
            #         if name in self.rule_keywords_single:   # 判断漏洞名称中是否存在可过滤单词
            #             filtered_flag = True
            #             break

            if not filtered_flag:
                left_rows.append(d)
            else:
                filtered_num += 1
                filtered_rows.append(d)
        print(f'\r* 漏洞关键词过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_rows

    def filter_linux_kernel(self, data):
        """过滤Linux Kernel本地拒绝服务漏洞"""
        left_rows = []
        filtered_rows = []
        if not data:
            return left_rows, filtered_rows
        print('* 开始过滤Linux Kernel本地拒绝服务漏洞数据.')
        filtered_num = 0
        for index, d in enumerate(data):
            print_progress('正在过滤Linux Kernel本地拒绝服务漏洞', index + 1, len(data))
            if 'Linux kernel' not in d[const.cnnvd_name]:
                left_rows.append(d)
            elif 'Linux kernel' in d[const.cnnvd_name] and not self.__check_linux_kernel(d[const.cve_cvss]):
                left_rows.append(d)
            else:
                # 被过滤的Linux kernel漏洞数据
                filtered_num += 1
                filtered_rows.append(d)
        print(f'\r* Linux Kernel本地拒绝服务漏洞过滤完成，{filtered_num}条数据被过滤.')
        return left_rows, filtered_rows

    @staticmethod
    def __check_linux_kernel(data):
        """
        过滤本地拒绝服务
        :param data:
        :return: False-非本地拒绝服务，或者无法过滤 True-本地拒绝服务
        """
        if data == 'N/A' or data == 'NULL' or data == '' or 'AV:N' in data:
            return False
        if 'C:N/I:N' == data[-11:-4]:
            return True

    @staticmethod
    def filter_not_update_detail(data):
        """过滤未更新详情的漏洞"""
        # keyword = '此条漏洞编号已分配，漏洞详情即将更新'
        # left_rows = []
        # filtered_num = 0
        # if not data:
        #     return left_rows, filtered_num
        # print('* 开始过滤未更新详情的漏洞.')
        # for index, d in enumerate(data):
        #     print_progress('正在过滤未更新详情的漏洞', index + 1, len(data))
        #     if keyword not in d[const.vul_des]:
        #         left_rows.append(d)
        #     else:
        #         filtered_num += 1
        # print(f'\r* 未更新详情的漏洞过滤完成，{filtered_num}条数据被过滤.')
        # return left_rows, filtered_num
        return data, 0      # 目前不需要过滤未更新详情的漏洞
