import re
import csv
import sys


class processing_file(object):
    def __init__(self, inputfile_name, outputfile_name):
        self.input_file = inputfile_name
        self.output_file = outputfile_name
        self.sortedlist = []
        self.component_dict_n = {'': dict()}
        self.component_dict = {'': []}
        self.init_component_dict_n()

    def __init__(self):
        self.sortedlist = []
        self.component_dict = {'': []}
        self.component_dict_n = {'': dict()}
        self.init_component_dict_n()

    # 新组件过滤结构，添加了组件版本，由component_dict_n包含
    def init_component_dict_n(self):
        with open("lib\componentlist.txt", 'r', encoding='utf-8') as filter_dict:
            for line in filter_dict.readlines():
                product_component_version = re.split('\|', line)
                product_component_version[-1] = re.sub('\n$', '', product_component_version[-1])
                product = product_component_version[0]
                component = product_component_version[1]
                if len(product_component_version) == 2:
                    if component in self.component_dict_n.keys():
                        self.component_dict_n[component][product] = '暂无'
                    else:
                        self.component_dict_n[component] = {product: '暂无'}
                elif len(product_component_version) == 3:
                    version = product_component_version[2]
                    if component in self.component_dict_n.keys():
                        self.component_dict_n[component][product] = version
                    else:
                        self.component_dict_n[component] = {product: version}
                else:
                    print(f'ERROR in {line}')
                    exit()
            self.component_dict_n.pop('')

    def init_component_dict(self):
        with open("lib/component_whitelist.txt", 'r', encoding='gbk') as filter_dict:
            for line in filter_dict.readlines():
                product_with_component = re.split('\s+', line)
                component_name = ''
                for i in range(1, len(product_with_component)):
                    if i != len(product_with_component) - 1:
                        component_name += product_with_component[i] + ' '
                    else:
                        component_name += product_with_component[i]
                component_name = re.sub(r"^\s*", '', component_name)
                component_name = re.sub(r"\s*$", '', component_name)
                if component_name in self.component_dict.keys():
                    self.component_dict[component_name].append(product_with_component[0])
                else:
                    self.component_dict[component_name] = [product_with_component[0]]
        self.component_dict.pop('')

    def dict_to_sortedlist(self):
        key = self.component_dict.keys()
        keylengthdict = {'0': []}
        maxlength = 0
        for k in key:
            if len(k) > maxlength:
                maxlength = len(k)
            if str(len(k)) in keylengthdict.keys():
                keylengthdict[str(len(k))].append(k)
            else:
                keylengthdict[str(len(k))] = [k]
        i = maxlength
        while i > 0:
            if str(i) in keylengthdict.keys():
                self.sortedlist.extend(keylengthdict[str(i)])
            i -= 1

    # 用于过滤CNVD报告
    def exec_filtering_CNVD_report(self, report_text):
        output = dict()
        report_text = report_text.lower()
        report_text = re.sub('-', '', report_text)
        for k in self.component_dict_n.keys():
            keyre = re.sub('\+', '\\\+', k)
            if re.search(fr'{keyre}', report_text, re.I):
                output[k] = self.component_dict_n[k]
        return output

    def exec_filtering_data(self, data):  # 用于step2直接过滤数据
        # data = csv.reader(open(self.input_file, 'r'))
        output = [[]]
        outputcomponent = []
        for row in data:
            vulname = row[1].lower()
            vulname = re.sub('-', ' ', vulname)  # 替换‘-’ by ‘space’
            affected_production = set()
            for key in self.component_dict.keys():
                keyre = re.sub('\+', '\\\+', key)  # 为了在随后使用名称作为正则表达式，故需对特殊符号进行转义
                if re.search(fr"{keyre}", vulname, re.I):
                    for i in self.component_dict[key]:
                        affected_production.add(i)
            if len(affected_production) != 0:
                output.append(row)
                string = ''
                for i in affected_production:
                    string += i + ' '
                outputcomponent.append(string)
        print('过滤后剩余：' + str(len(output)) + '行')

        output.pop(0)
        # outputlist, fplist = self.falsepositive(output)
        # outputlist.extend(fplist)
        return output, len(data) - len(output), outputcomponent

    # 新的过滤机制应用新的过滤dict，结果中添加了组件版本号
    def exec_filtering_data_n(self, data):
        output = [[]]
        outputcomponent = []
        outputversion = []
        for row in data:
            vulname = row[1].lower()
            vulname = re.sub('-', ' ', vulname)  # 替换‘-’ by ‘space’
            affected_production = dict()
            for key in self.component_dict_n.keys():
                keyre = re.sub('\+', '\\\+', key)  # 为了在随后使用名称作为正则表达式，故需对特殊符号进行转义
                if re.search(fr"{keyre}", vulname, re.I):
                    for i in self.component_dict_n[key].keys():
                        # affected_production.add((i, self.component_dict_n[key][i]))
                        affected_production[i] = self.component_dict_n[key][i]  # 添加的是组件和版本号元组
            if len(affected_production) != 0:
                sortedlist = [i for i in affected_production.keys()]
                sortedlist.sort()
                print(sortedlist)
                print(vulname)
                output.append(row)
                string = ''
                string_with_version = ''
                for i in sortedlist:
                    print(i)
                    string += i + '、'
                    string_with_version += i + ':' + affected_production[i] + '、'
                string = re.sub('、$', '', string)
                string_with_version = re.sub('、$', '', string_with_version)
                outputcomponent.append(string)
                outputversion.append(string_with_version)

        print('过滤后剩余：' + str(len(output) - 1) + '行')

        output.pop(0)
        # outputlist, fplist = self.falsepositive(output)
        # outputlist.extend(fplist)
        return output, len(data) - len(output), outputcomponent, outputversion

    def exec_filtering(self):  # 依赖原本产生的filter文件
        data = csv.reader(open(self.input_file, 'r'))
        output = [[]]
        for row in data:
            vulname = row[1].lower()
            vulname = re.sub('-', ' ', vulname)  # 替换‘-’ by ‘space’
            affected_production = set()
            for key in self.component_dict.keys():
                keyre = re.sub('\+', '\\\+', key)  # 为了在随后使用名称作为正则表达式，故需对特殊符号进行转义
                if re.search(fr"{keyre}", vulname, re.I):
                    while len(row) < 16:
                        row.append('')
                    for i in self.component_dict[key]:
                        affected_production.add(i)
            if len(affected_production) != 0:
                for i in affected_production:
                    row[15] += i + ' '
                output.append(row)
        print('过滤后剩余：' + str(len(output)) + '行')

        writer = csv.writer(open(self.output_file, 'w', newline=''))
        output.pop(0)
        outputlist, fplist = self.falsepositive(output)
        for i in range(3):
            outputlist.append([])
        outputlist.extend(fplist)
        writer.writerows(outputlist)

    @staticmethod
    def falsepositive(output):
        with open("lib/falsepositive_words.txt", 'r', encoding='gbk') as fp:
            outputset = set()
            fplist = []
            outputlist = []
            fpset = set()
            for line in fp:
                line = re.sub(r'\s+', '', line)
                if line != '':
                    fpset.add(line.lower())
            for i in range(len(output)):
                for j in fpset:
                    if j in output[i][1].lower():
                        outputset.add(i)
                        break
            for i in range(len(output)):
                if i in outputset:
                    fplist.append(output[i])
                else:
                    outputlist.append(output[i])
            return outputlist, fplist

# print(processing_file("","").component_dict['linux kernel'])
