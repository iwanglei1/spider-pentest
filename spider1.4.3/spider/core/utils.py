#!/usr/bin/env python
# -*- coding: utf-8 -*-
# date: 2020/1/11 15:06
# author: liyong
import os
import re
import sys
from .const import failed_soup, end_flag


def check_soup(html_data):
    """当make_soup返回failed_soup时，返回True"""
    return html_data.find('div', class_=failed_soup)


def print_progress(tips, index, total):
    """动态显示执行进度，index要从1开始"""
    print(f'\r* {tips} {round(index / total * 100)}%.', end='')

def check_xlsx_path(path):
    """检查输入的xlsx路径是否存在文件，若存在，则返回最新的一个filter文件"""
    files=os.listdir(path)
    if not files:
        return None
    max_time='000000'
    for file in files:
        try:
            str_time=file[0:6]
            if int(str_time)>int(max_time):
                max_time=str_time
        except ValueError:
            continue
    if not max_time:
        return None
    return os.path.join(path,f'{max_time}_cnnvd_filter.xlsx')

def check_csv_path(path):
    """检查输入的csv路径是否存在文件，若存在，则返回最新的一个filter文件"""
    files = os.listdir(path)
    if not files:
        return None
    max_time = '000000'
    for file in files:
        try:
            str_time = file[0:6]
            if int(str_time) > int(max_time):
                max_time = str_time
        except ValueError:
            continue
    if not max_time:
        return None
    return os.path.join(path, f'{max_time}_cnnvd_filter.csv')


def get_cve_rows(filter_):
    print(f'请输入/粘贴一个或多个CVE编号如CVE-2020-2020或cve-2020-2020，以 {end_flag} 结束输入：')
    lines = []
    try:
        while True:
            line = sys.stdin.readline().strip()
            if line == end_flag:  # 读取到end跳出
                break
            lines.append(line)
    except:
        pass
    cve_rows = []
    for line in lines:
        line = line.strip()
        if line == '':
            continue
        line = re.sub(r'[!"#$%&\'()*+,./:;<=>?@，。、；…【】《》？“”‘’！[\]\\^_`{|}~\s]+', '', line)    # 过滤除短横杠之外的特殊字符
        rows = re.sub('(CVE-)+|(cve-)+', ' CVE-', line).split(' ')      # 根据CVE或cve字样，分割为多个数组
        for row in rows:
            if row == '':
                continue
            m = re.match(r'^CVE[\-]\d+[\-]\d+$', row)
            if not m:
                continue
            if filter_.filter_cve_id(row):  # 过滤已发布的CVE编号
                continue
            cve_rows.append(row)
    cve_rows = list(set(cve_rows))      # 过滤重复元素
    cve_rows.sort()
    return cve_rows
